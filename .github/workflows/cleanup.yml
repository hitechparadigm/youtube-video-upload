name: Cleanup Old Resources

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to clean up'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      confirm_cleanup:
        description: 'Type "CONFIRM" to proceed with cleanup'
        required: true
        type: string
      cleanup_scope:
        description: 'What to clean up'
        required: true
        default: 'deployment-artifacts'
        type: choice
        options:
          - deployment-artifacts
          - old-lambda-versions
          - cloudformation-stacks

env:
  AWS_REGION: us-east-1

jobs:
  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_cleanup == 'CONFIRM'
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: npm ci

      - name: Install SAM CLI
        uses: aws-actions/setup-sam@v2

      - name: Run SAM-based cleanup
        run: |
          echo "üßπ Starting cleanup for ${{ github.event.inputs.environment }} environment"
          echo "Cleanup scope: ${{ github.event.inputs.cleanup_scope }}"
          
          case "${{ github.event.inputs.cleanup_scope }}" in
            "deployment-artifacts")
              echo "Cleaning up S3 deployment artifacts..."
              aws s3 rm s3://automated-video-pipeline-deployments-${{ github.event.inputs.environment }} --recursive --exclude "*" --include "*.zip" --include "packaged-*"
              ;;
            "old-lambda-versions")
              echo "Cleaning up old Lambda function versions..."
              aws lambda list-functions --query 'Functions[?starts_with(FunctionName, `video-pipeline`)].FunctionName' --output text | \
              xargs -I {} aws lambda list-versions-by-function --function-name {} --query 'Versions[?Version!=`$LATEST`][:-3].Version' --output text | \
              xargs -I {} aws lambda delete-function --function-name {} --qualifier {}
              ;;
            "cloudformation-stacks")
              echo "‚ö†Ô∏è CloudFormation stack cleanup requires manual confirmation"
              echo "Stack name: automated-video-pipeline-${{ github.event.inputs.environment }}"
              echo "Use: aws cloudformation delete-stack --stack-name automated-video-pipeline-${{ github.event.inputs.environment }}"
              ;;
          esac

      - name: Summary
        run: |
          echo "‚úÖ Cleanup completed for ${{ github.event.inputs.environment }} environment"
          echo "Scope: ${{ github.event.inputs.cleanup_scope }}"
          echo "SAM-based resources cleaned up successfully"